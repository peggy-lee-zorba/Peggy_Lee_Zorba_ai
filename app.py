from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import requests
import os
from datetime import timedelta, datetime

app = Flask(__name__)

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
FLASK_SECRET_KEY = os.getenv("FLASK_SECRET_KEY")
if not FLASK_SECRET_KEY:
    raise ValueError(
        "‚ùå FLASK_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! "
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.com: "
        "Dashboard ‚Üí Environment ‚Üí Add Secret File/Variable"
    )
app.secret_key = FLASK_SECRET_KEY
app.permanent_session_lifetime = timedelta(hours=1)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö cookie
app.config.update(
    SESSION_COOKIE_SECURE=True,
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
MAX_CONTEXT_MESSAGES = 6  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (user + assistant)
MAX_CONTEXT_LENGTH = 16000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI ‚Äî —á–µ—Ä–µ–∑ OpenRouter.ai
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    raise ValueError(
        "‚ùå OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! "
        "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openrouter.ai/keys –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Environment"
    )

AI_ENDPOINT = "https://openrouter.ai/api/v1/chat/completions"
AI_MODEL = os.getenv("AI_MODEL", "deepseek/deepseek-chat")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
VALID_USERNAME = os.getenv("APP_USERNAME", "analyst")
VALID_PASSWORD = os.getenv("APP_PASSWORD", "securepass")

# ========================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (—Ç–æ–ª—å–∫–æ 10 –æ—Å–Ω–æ–≤–Ω—ã—Ö)
# ========================
def get_exchange_rates(base='USD'):
    url = f"https://api.exchangerate-api.com/v4/latest/{base}"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            rates = data.get('rates', {})
            top_currencies = ['EUR', 'GBP', 'JPY', 'CNY', 'CAD', 'AUD', 'CHF', 'RUB', 'INR', 'BRL']
            filtered_rates = {curr: rates[curr] for curr in top_currencies if curr in rates}
            return filtered_rates
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
    return {
        "EUR": 0.92, "GBP": 0.79, "JPY": 155.3, "CNY": 7.25,
        "CAD": 1.37, "AUD": 1.52, "CHF": 0.89, "RUB": 92.5,
        "INR": 83.4, "BRL": 5.12
    }

# ========================
# –†–æ—É—Ç—ã
# ========================
@app.route("/")
def index():
    if "blocked_until" in session:
        blocked_until = datetime.fromisoformat(session["blocked_until"])
        if datetime.now() < blocked_until:
            remaining_time = (blocked_until - datetime.now()).total_seconds() / 60
            return render_template(
                "login.html", 
                error=f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} –º–∏–Ω—É—Ç."
            )
        else:
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ - –æ—á–∏—â–∞–µ–º
            session.pop("blocked_until", None)
            session.pop("login_attempts", None)
    rates = get_exchange_rates()
    is_authorized = "user" in session
    return render_template("index.html", rates=rates, is_authorized=is_authorized)

@app.route("/login", methods=["GET", "POST"])
def login():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if "blocked_until" in session:
        blocked_until = datetime.fromisoformat(session["blocked_until"])
        if datetime.now() < blocked_until:
            return render_template("login.html", error="‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.")

    if request.method == "POST":
        data = request.get_json() if request.is_json else request.form
        username = data.get("username")
        password = data.get("password")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if "login_attempts" not in session:
            session["login_attempts"] = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
        if username == VALID_USERNAME and password == VALID_PASSWORD:
            session.pop("login_attempts", None)
            session.pop("blocked_until", None)
            session["user"] = username
            if request.is_json:
                return jsonify({"success": True})
            else:
                return redirect(url_for("index"))

        else:
            session["login_attempts"] += 1

            if session["login_attempts"] >= 3:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
                block_time = datetime.now() + timedelta(minutes=30)
                session["blocked_until"] = block_time.isoformat()
                session.pop("login_attempts", None)
                error_msg = "üîí –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç."
            else:
                remaining = 3 - session["login_attempts"]
                error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"

            if request.is_json:
                return jsonify({"success": False, "error": error_msg}), 401
            else:
                return render_template("login.html", error=error_msg)

    # GET –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    return render_template("login.html")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è rate limiting (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
from collections import defaultdict
from time import time

request_timestamps = defaultdict(list)
MAX_AI_REQUESTS_PER_HOUR = 20

def check_rate_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (20 –≤ —á–∞—Å)"""
    now = time()
    hour_ago = now - 3600
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    request_timestamps[user_id] = [
        ts for ts in request_timestamps[user_id] if ts > hour_ago
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(request_timestamps[user_id]) >= MAX_AI_REQUESTS_PER_HOUR:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    request_timestamps[user_id].append(now)
    return True

@app.route("/ask-ai", methods=["POST"])
def ask_ai():
    if "user" not in session:
        return jsonify({"error": "Unauthorized"}), 401
    
    if not check_rate_limit(session["user"]):
        return jsonify({
            "error": "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (20 –≤ —á–∞—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }), 429

    if not OPENROUTER_API_KEY:
        return jsonify({"error": "OpenRouter API key missing"}), 500

    if not OPENROUTER_API_KEY:
        return jsonify({"error": "OpenRouter API key missing"}), 500

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
    if "message_history" not in session:
        session["message_history"] = []

    user_message = request.json.get("message", "").strip()
    if not user_message:
        return jsonify({"error": "Empty message"}), 400

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": os.getenv("APP_URL", "https://business-analytics-dashboard.com"),
        "X-Title": "Business Analytics Dashboard",
    }

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    system_prompt = """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å:
- –ê–Ω–∞–ª–∏–∑–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
- –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
- –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏—è–º

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ, –∫–æ–≥–¥–∞ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —á–µ—Ç–∫–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_warning = False
    current_context_size = sum(len(msg["content"]) for msg in session["message_history"])
    
    if len(session["message_history"]) >= MAX_CONTEXT_MESSAGES * 2:
        context_warning = True
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–≤—ã–µ 2 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4
        _cleanup_message_history(session["message_history"])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    session["message_history"].append({"role": "user", "content": user_message})
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    messages = [{"role": "system", "content": system_prompt}]
    messages.extend(session["message_history"])
    
    data = {
        "model": AI_MODEL,
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 2000
    }

    try:
        response = requests.post(AI_ENDPOINT, json=data, headers=headers, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        if "choices" in result and len(result["choices"]) > 0:
            ai_reply = result["choices"][0]["message"]["content"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é
            session["message_history"].append({"role": "assistant", "content": ai_reply})
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            _cleanup_message_history(session["message_history"])
            
            session.modified = True
            
            return jsonify({
                "reply": ai_reply, 
                "context_warning": context_warning,
                "context_size": len(session["message_history"])
            })
        else:
            return jsonify({"error": "Invalid response format from AI"}), 500
            
    except requests.exceptions.Timeout:
        return jsonify({"error": "AI request timeout"}), 504
    except requests.exceptions.RequestException as e:
        error_detail = response.text if 'response' in locals() else 'No response'
        return jsonify({"error": f"OpenRouter Error: {str(e)}"}), 500
    except Exception as e:
        return jsonify({"error": f"Unexpected error: {str(e)}"}), 500

def _cleanup_message_history(message_history):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
    if len(message_history) > MAX_CONTEXT_MESSAGES * 2:
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞) –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        important_messages = message_history[:2]
        recent_messages = message_history[-(MAX_CONTEXT_MESSAGES * 2 - 2):]
        message_history.clear()
        message_history.extend(important_messages + recent_messages)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ
    total_length = sum(len(msg["content"]) for msg in message_history)
    while total_length > MAX_CONTEXT_LENGTH and len(message_history) > 4:
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö)
        if len(message_history) > 2:
            removed_msg = message_history.pop(2)
            total_length -= len(removed_msg["content"])
        else:
            break

@app.route("/clear-context", methods=["POST"])
def clear_context():
    if "user" not in session:
        return jsonify({"error": "Unauthorized"}), 401
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    if "message_history" in session:
        session.pop("message_history")
    
    session.modified = True
    return jsonify({"success": True, "message": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω"})

@app.route("/context-info", methods=["GET"])
def context_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    if "user" not in session:
        return jsonify({"error": "Unauthorized"}), 401
    
    context_size = len(session.get("message_history", []))
    return jsonify({
        "context_size": context_size,
        "max_context": MAX_CONTEXT_MESSAGES * 2,
        "percentage": min(100, int((context_size / (MAX_CONTEXT_MESSAGES * 2)) * 100))
    })

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)